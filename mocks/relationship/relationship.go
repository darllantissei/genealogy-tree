// Code generated by MockGen. DO NOT EDIT.
// Source: /home/darllan/go/src/github.com/darllantissei/genealogy-tree/application/relationship/interface.go

// Package mock_relationship is a generated GoMock package.
package mock_relationship

import (
	context "context"
	reflect "reflect"

	model "github.com/darllantissei/genealogy-tree/application/model"
	gomock "github.com/golang/mock/gomock"
)

// MockIRelationshipService is a mock of IRelationshipService interface.
type MockIRelationshipService struct {
	ctrl     *gomock.Controller
	recorder *MockIRelationshipServiceMockRecorder
}

// MockIRelationshipServiceMockRecorder is the mock recorder for MockIRelationshipService.
type MockIRelationshipServiceMockRecorder struct {
	mock *MockIRelationshipService
}

// NewMockIRelationshipService creates a new mock instance.
func NewMockIRelationshipService(ctrl *gomock.Controller) *MockIRelationshipService {
	mock := &MockIRelationshipService{ctrl: ctrl}
	mock.recorder = &MockIRelationshipServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRelationshipService) EXPECT() *MockIRelationshipServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIRelationshipService) Create(ctx context.Context, rtshp model.Relationship) (model.Relationship, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, rtshp)
	ret0, _ := ret[0].(model.Relationship)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIRelationshipServiceMockRecorder) Create(ctx, rtshp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIRelationshipService)(nil).Create), ctx, rtshp)
}

// MockIRelationshipWriteDB is a mock of IRelationshipWriteDB interface.
type MockIRelationshipWriteDB struct {
	ctrl     *gomock.Controller
	recorder *MockIRelationshipWriteDBMockRecorder
}

// MockIRelationshipWriteDBMockRecorder is the mock recorder for MockIRelationshipWriteDB.
type MockIRelationshipWriteDBMockRecorder struct {
	mock *MockIRelationshipWriteDB
}

// NewMockIRelationshipWriteDB creates a new mock instance.
func NewMockIRelationshipWriteDB(ctrl *gomock.Controller) *MockIRelationshipWriteDB {
	mock := &MockIRelationshipWriteDB{ctrl: ctrl}
	mock.recorder = &MockIRelationshipWriteDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRelationshipWriteDB) EXPECT() *MockIRelationshipWriteDBMockRecorder {
	return m.recorder
}

// Record mocks base method.
func (m *MockIRelationshipWriteDB) Record(ctx context.Context, rtshp model.Relationship) (model.Relationship, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Record", ctx, rtshp)
	ret0, _ := ret[0].(model.Relationship)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Record indicates an expected call of Record.
func (mr *MockIRelationshipWriteDBMockRecorder) Record(ctx, rtshp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Record", reflect.TypeOf((*MockIRelationshipWriteDB)(nil).Record), ctx, rtshp)
}

// MockIRelationshipReadDB is a mock of IRelationshipReadDB interface.
type MockIRelationshipReadDB struct {
	ctrl     *gomock.Controller
	recorder *MockIRelationshipReadDBMockRecorder
}

// MockIRelationshipReadDBMockRecorder is the mock recorder for MockIRelationshipReadDB.
type MockIRelationshipReadDBMockRecorder struct {
	mock *MockIRelationshipReadDB
}

// NewMockIRelationshipReadDB creates a new mock instance.
func NewMockIRelationshipReadDB(ctrl *gomock.Controller) *MockIRelationshipReadDB {
	mock := &MockIRelationshipReadDB{ctrl: ctrl}
	mock.recorder = &MockIRelationshipReadDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRelationshipReadDB) EXPECT() *MockIRelationshipReadDBMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockIRelationshipReadDB) Get(ctx context.Context, rtshp model.Relationship) (model.Relationship, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, rtshp)
	ret0, _ := ret[0].(model.Relationship)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIRelationshipReadDBMockRecorder) Get(ctx, rtshp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIRelationshipReadDB)(nil).Get), ctx, rtshp)
}

// GetKinship mocks base method.
func (m *MockIRelationshipReadDB) GetKinship(ctx context.Context, member model.RelationshipMember) ([]model.RelationshipMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKinship", ctx, member)
	ret0, _ := ret[0].([]model.RelationshipMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKinship indicates an expected call of GetKinship.
func (mr *MockIRelationshipReadDBMockRecorder) GetKinship(ctx, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKinship", reflect.TypeOf((*MockIRelationshipReadDB)(nil).GetKinship), ctx, member)
}

// MockIRelationshipPersistenceDB is a mock of IRelationshipPersistenceDB interface.
type MockIRelationshipPersistenceDB struct {
	ctrl     *gomock.Controller
	recorder *MockIRelationshipPersistenceDBMockRecorder
}

// MockIRelationshipPersistenceDBMockRecorder is the mock recorder for MockIRelationshipPersistenceDB.
type MockIRelationshipPersistenceDBMockRecorder struct {
	mock *MockIRelationshipPersistenceDB
}

// NewMockIRelationshipPersistenceDB creates a new mock instance.
func NewMockIRelationshipPersistenceDB(ctrl *gomock.Controller) *MockIRelationshipPersistenceDB {
	mock := &MockIRelationshipPersistenceDB{ctrl: ctrl}
	mock.recorder = &MockIRelationshipPersistenceDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRelationshipPersistenceDB) EXPECT() *MockIRelationshipPersistenceDBMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockIRelationshipPersistenceDB) Get(ctx context.Context, rtshp model.Relationship) (model.Relationship, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, rtshp)
	ret0, _ := ret[0].(model.Relationship)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIRelationshipPersistenceDBMockRecorder) Get(ctx, rtshp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIRelationshipPersistenceDB)(nil).Get), ctx, rtshp)
}

// GetKinship mocks base method.
func (m *MockIRelationshipPersistenceDB) GetKinship(ctx context.Context, member model.RelationshipMember) ([]model.RelationshipMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetKinship", ctx, member)
	ret0, _ := ret[0].([]model.RelationshipMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKinship indicates an expected call of GetKinship.
func (mr *MockIRelationshipPersistenceDBMockRecorder) GetKinship(ctx, member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKinship", reflect.TypeOf((*MockIRelationshipPersistenceDB)(nil).GetKinship), ctx, member)
}

// Record mocks base method.
func (m *MockIRelationshipPersistenceDB) Record(ctx context.Context, rtshp model.Relationship) (model.Relationship, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Record", ctx, rtshp)
	ret0, _ := ret[0].(model.Relationship)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Record indicates an expected call of Record.
func (mr *MockIRelationshipPersistenceDBMockRecorder) Record(ctx, rtshp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Record", reflect.TypeOf((*MockIRelationshipPersistenceDB)(nil).Record), ctx, rtshp)
}
